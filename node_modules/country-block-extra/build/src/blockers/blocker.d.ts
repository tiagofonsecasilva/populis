/// <reference types="node" />
/// <reference types="express" />
import { EventEmitter } from "events";
import * as express from "express";
export interface IBlockerConfig {
    /** Allow request to go through if block determination fails for some reason. Default is false. */
    lenient?: boolean;
    /** Status code to use to reject in case of a block. Default is 451 "Unavailable For Legal Reasons". */
    statusCode?: number;
}
/** Name of event fired on blocking. Yields a reason string and the original request. */
export declare const EVENT_BLOCKED = "blocked";
/**
 * Express middleware to block either based on country or (optionally) on Tor access.
 */
export declare abstract class Blocker extends EventEmitter {
    protected config: IBlockerConfig;
    /**
     * @param {IBlockerConfig} config  Base configuration to use, shared access.
     */
    constructor(config: IBlockerConfig);
    /**
     * The route function of this middleware, to be used in the Express instance and overridden.
     * Will always block, unless the lenient flag in the configuration is set.
     * @param {e.Request} req  Request to intercept and check.
     * @param {e.Response} res  Response to use for rejection, if necessary.
     * @param {e.NextFunction} next  Next function to call if rejection ddidn't happen.
     * @returns {Promise<void>}  Completes one the checks have been executed.
     */
    check(req: express.Request, res: express.Response, next: express.NextFunction): Promise<void>;
    /**
     * Rejection point. Sends the configured status code and ends the response.
     * Inherited classes might override this for different behavior.
     * @param {e.Request} req  The request going to be rejected.
     * @param {e.Response} res  Response where to send the status code back to.
     * @param {string} reason  Reason for the rejection.
     */
    protected reject(req: express.Request, res: express.Response, reason: string): void;
}
/**
 * DNS lookup, asynchronized.
 * @param {string} hostname  Host name to look up.s
 * @param {number} family  IP address family, either 4 or 6.
 * @returns Yields the IP address string, or undefined on lookup failure.
 */
export declare function dnsLookup(hostname: string, family?: number): Promise<string | undefined>;
