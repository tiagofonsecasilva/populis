/// <reference types="express" />
import * as express from "express";
import { Blocker, IBlockerConfig } from "./blocker";
export interface ITorBlockerConfig extends IBlockerConfig {
    /** Address from which the server is seen on the public Internet. */
    server: {
        host: string;
        port: number;
    };
}
/**
 * Express middleware to block either based on country or (optionally) on Tor access.
 */
export declare class TorBlocker extends Blocker {
    protected config: ITorBlockerConfig;
    /**
     * @param {ITorBlockerConfig} config  Configuration to use, shared access.
     */
    constructor(config: ITorBlockerConfig);
    /**
     * The route function of this middleware, to be used in the Express instance.
     * @param {e.Request} req  Request to intercept and check.
     * @param {e.Response} res  Response to use for rejection, if necessary.
     * @param {e.NextFunction} next  Next function to call if rejection ddidn't happen.
     * @returns {Promise<void>}  Completes one the checks have been executed.
     */
    check(req: express.Request, res: express.Response, next: express.NextFunction): Promise<void>;
}
